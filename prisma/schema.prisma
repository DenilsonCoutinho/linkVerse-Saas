datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String     @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  userName      UserName[]
  links         Links[]
  bioName       BioName[]
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}

model UserName {
  id_link   String   @id @default(auto()) @map("_id") @db.ObjectId
  username  String   @unique
  createdAt DateTime @default(now())
  User      User?    @relation(fields: [userId], references: [id])
  userId    String?  @db.ObjectId
}

model BioName {
  id_Bio  String  @id @default(auto()) @map("_id") @db.ObjectId
  bioName String  @unique
  User    User?   @relation(fields: [userId], references: [id])
  userId  String? @db.ObjectId
}

model Links {
  id     String  @id @default(auto()) @map("_id") @db.ObjectId
  url    String
  clicks Int?
  active Boolean
  User   User?   @relation(fields: [userId], references: [id])
  userId String  @db.ObjectId
  imagem String?
  order  Int? // Novo campo para definir a ordem das categorias
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}
